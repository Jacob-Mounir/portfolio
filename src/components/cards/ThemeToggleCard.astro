---
import CardWrapper from '../ui/CardWrapper.astro';
---

<CardWrapper class="lg:row-start-3">
  <div class="flex flex-col h-full">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold text-primary dark:text-white">
        Tech News
      </h2>
      <span class="text-xs text-gray-500 dark:text-gray-400 animate-pulse">Live</span>
    </div>

    <div class="space-y-4 news-container overflow-y-auto max-h-[300px]" data-news-container>
      <!-- Loading state -->
      <div class="animate-pulse">
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
        <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
      </div>
    </div>
  </div>
</CardWrapper>

<style>
  .news-container {
    scrollbar-width: thin;
    scrollbar-color: rgba(155, 155, 155, 0.5) transparent;
  }

  .news-container::-webkit-scrollbar {
    width: 6px;
  }

  .news-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .news-container::-webkit-scrollbar-thumb {
    background-color: rgba(155, 155, 155, 0.5);
    border-radius: 20px;
    border: transparent;
  }

  .news-item {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  const newsContainer = document.querySelector('[data-news-container]');

  async function fetchNews() {
    try {
      // Fetch top stories IDs
      const response = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json');
      const storyIds = await response.json();

      // Get the first 6 stories
      const topStoryIds = storyIds.slice(0, 6);

      if (newsContainer) {
        newsContainer.innerHTML = ''; // Clear loading state

        // Fetch details for each story
        const stories = await Promise.all(
          topStoryIds.map(async (id) => {
            const storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);
            return storyResponse.json();
          })
        );

        // Create and append news items
        stories.forEach((story) => {
          const newsItem = document.createElement('div');
          newsItem.className = 'news-item p-3 bg-white dark:bg-tertiary rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200';

          const timeAgo = getTimeAgo(story.time * 1000); // Convert Unix timestamp to milliseconds

          newsItem.innerHTML = `
            <a href="${story.url || `https://news.ycombinator.com/item?id=${story.id}`}"
               target="_blank"
               rel="noopener noreferrer"
               class="block">
              <h3 class="text-sm font-medium text-primary dark:text-white mb-1 line-clamp-2">
                ${story.title}
              </h3>
              <div class="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                <span>${timeAgo}</span>
                <span>${story.score} points</span>
              </div>
            </a>
          `;

          newsContainer.appendChild(newsItem);
        });
      }
    } catch (error) {
      console.error('Error fetching news:', error);
      if (newsContainer) {
        newsContainer.innerHTML = `
          <div class="text-sm text-gray-500 dark:text-gray-400 text-center p-4">
            Unable to load news at the moment
          </div>
        `;
      }
    }
  }

  function getTimeAgo(timestamp) {
    const seconds = Math.floor((Date.now() - timestamp) / 1000);

    const intervals = {
      year: 31536000,
      month: 2592000,
      week: 604800,
      day: 86400,
      hour: 3600,
      minute: 60
    };

    for (const [unit, secondsInUnit] of Object.entries(intervals)) {
      const interval = Math.floor(seconds / secondsInUnit);
      if (interval >= 1) {
        return `${interval} ${unit}${interval === 1 ? '' : 's'} ago`;
      }
    }

    return 'Just now';
  }

  // Initial fetch
  fetchNews();

  // Refresh every 5 minutes
  const updateInterval = setInterval(fetchNews, 300000);

  // Cleanup
  document.addEventListener('astro:before-swap', () => {
    if (updateInterval) {
      clearInterval(updateInterval);
    }
  });
</script>
